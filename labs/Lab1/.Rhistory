knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
hsbc_basic <- read.csv("hsbc_basic.csv", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
hsbc_basic <- read.csv("hsbc_basic.csv", header = TRUE)
# Load datasets
hsbc_basic <- read.csv("hsbc_basic.csv", header = TRUE)
ls
# Load datasets
hsbc_basic <- read.csv("hsbc_basic.csv", header = TRUE)
# Load datasets
hsbc_basic <- read.csv("hsbc_basic.csv", header = TRUE)
hsbc_basic <- read.csv("hsbc-basic.csv", header = TRUE)
hsbc_health <- read.table("hsbc-health.txt", header = TRUE)
# Number of rows and columns
cat("hsbc_basic:", dim(hsbc_basic), "\n")
cat("hsbc_health:", dim(hsbc_health), "\n")
# Variable types
str(hsbc_basic)
str(hsbc_health)
# Number of rows and columns
cat("hsbc_basic:", dim(hsbc_basic), "\n")
cat("hsbc_health:", dim(hsbc_health), "\n")
# Variable types
str(hsbc_basic)
str(hsbc_health)
# Merge datasets on id4
hsbc <- merge(hsbc_basic, hsbc_health, by = "id4")
# Number of rows and columns in merged dataset
cat("hsbc:", dim(hsbc), "\n")
# Merge datasets on id4
hsbc <- merge(hsbc_basic, hsbc_health, by = "id4")
# Number of rows and columns in merged dataset
cat("number of rows and columns of hsbc:", dim(hsbc), "\n")
# Check for missing values
missing_info <- sapply(hsbc, function(x) sum(is.na(x)))
missing_info[missing_info > 0]
# Remove rows with missing values
hsbc <- na.omit(hsbc)
## Task 2: Basic Information
```{r}
hsbc_basic <- read.csv("hsbc-basic.csv", header = TRUE)
hsbc_health <- read.table("hsbc-health.txt", header = TRUE)
## Task 2: Basic Information
```{r}
# Number of rows and columns
cat("hsbc_basic:", dim(hsbc_basic), "\n")
cat("hsbc_health:", dim(hsbc_health), "\n")
# Variable types
str(hsbc_basic)
str(hsbc_health)
# Number of rows and columns
cat("Number of rows and columns of hsbc_basic:", dim(hsbc_basic), "\n")
cat("Number of rows and columns of hsbc_health:", dim(hsbc_health), "\n")
# Variable types
str(hsbc_basic)
str(hsbc_health)
# Number of rows and columns
cat("Number of rows and columns of hsbc_basic:", dim(hsbc_basic), "\n")
cat("Number of rows and columns of hsbc_health:", dim(hsbc_health), "\n")
# 变量类型和数量
# 定义函数以统计变量类型
count_var_types <- function(df) {
data.frame(
numeric = sum(sapply(df, is.numeric)),
integer = sum(sapply(df, is.integer)),
character = sum(sapply(df, is.character)),
factor = sum(sapply(df, is.factor))
)
}
# 显示每个数据集的变量类型数量
cat("hsbc_basic 数据集的变量类型数量：\n")
print(count_var_types(hsbc_basic))
cat("hsbc_health 数据集的变量类型数量：\n")
print(count_var_types(hsbc_health))
# Number of rows and columns
cat("Number of rows and columns of hsbc_basic:", dim(hsbc_basic), "\n")
cat("Number of rows and columns of hsbc_health:", dim(hsbc_health), "\n")
# Variable types
str(hsbc_basic)
str(hsbc_health)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Check the data types for hsbc_basic
cat("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Check the data types for hsbc_health
cat("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Check the data types for hsbc_basic
cat("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Function to count variable types
count_variable_types <- function(df) {
list(
numeric = sum(sapply(df, is.numeric)),
integer = sum(sapply(df, is.integer)),
character = sum(sapply(df, is.character)),
factor = sum(sapply(df, is.factor))
)
}
# Count variable types for hsbc_basic
basic_types <- count_variable_types(hsbc_basic)
cat("hsbc_basic - Variable Types:\n")
cat("Numeric:", basic_types$numeric, "\n")
cat("Integer:", basic_types$integer, "\n")
cat("Character:", basic_types$character, "\n")
cat("Factor:", basic_types$factor, "\n")
# Count variable types for hsbc_health
health_types <- count_variable_types(hsbc_health)
cat("hsbc_health - Variable Types:\n")
cat("Numeric:", health_types$numeric, "\n")
cat("Integer:", health_types$integer, "\n")
cat("Character:", health_types$character, "\n")
cat("Factor:", health_types$factor, "\n")
# Check the data types for hsbc_basic
cat("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Check the data types for hsbc_health
cat("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Merge datasets on id4
hsbc_merged <- merge(hsbc_basic, hsbc_health, by = "id4")
# Display number of rows and columns in the merged data
cat("hsbc - Rows:", nrow(hsbc), "Columns:", ncol(hsbc), "\n")
# Merge datasets on id4
hsbc_merged <- merge(hsbc_basic, hsbc_health, by = "id4")
# Display number of rows and columns in the merged data
cat("hsbc - Rows:", nrow(hsbc_merged), "Columns:", ncol(hsbc_merged), "\n")
# Check for missing values
missing_info <- sapply(hsbc, function(x) sum(is.na(x)))
missing_info[missing_info > 0]
# Remove rows with missing values
hsbc <- na.omit(hsbc)
# Check for missing values
missing_info <- sapply(hsbc, function(x) sum(is.na(x)))
missing_info[missing_info > 0]
# Remove rows with missing values
hsbc <- na.omit(hsbc_merged)
# Check for missing values
missing_info <- sapply(hsbc, function(x) sum(is.na(x)))
missing_info[missing_info > 0]
# Remove rows with missing values
hsbc <- na.omit(hsbc_merged)
# Check for missing values
missing_info <- sapply(hsbc, function(x) sum(is.na(x)))
missing_info[missing_info > 0]
# Remove rows with missing values
hsbc <- na.omit(hsbc_merged)
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
cat("Columns with missing values:\n")
print(missing_values[missing_columns])
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc_merged, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
cat("Columns with missing values:\n")
print(missing_values[missing_columns])
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc_merged, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
cat("Columns with missing values:")
print(missing_values[missing_columns])
# Average life satisfaction
average_lifesat <- mean(hsbc_merged$lifesat, na.rm = TRUE)
cat("Average Life Satisfaction:", average_lifesat, "\n")
# Observations by age category
age_category_counts <- table(hsbc_merged$AGECAT)
print(age_category_counts)
# Age category with most observations
most_obs_category <- names(which.max(age_category_counts))
cat("Age category with most observations:", most_obs_category, "\n")
# Average life satisfaction
average_lifesat <- mean(hsbc_merged$lifesat, na.rm = TRUE)
cat("Average Life Satisfaction:", average_lifesat, "\n")
# Observations by age category
age_counts <- table(hsbc_merged$AGECAT)
print(age_counts)
# Age category with most observations
most_observed_agecat <- names(which.max(age_counts))
cat("Age category with most observations:", most_observed_agecat, "\n")
# Bullying by age category
bullying_counts <- table(hsbc$AGECAT[hsbc_merged$bully_dummy == 1])
print(bullying_counts)
# Age category with most bullied children
most_bullied <- names(which.max(bullying_counts))
cat("Age category with most bullied children:", most_bullied, "\n")
# (a) Bullied kids with lifesat < 7
low_lifesat_bullied <- nrow(subset(hsbc_merged, bully_dummy == 1 & lifesat < 7))
cat("Bullied kids with lifesat < 7:", low_lifesat_bullied, "\n")
# (b) Girls in age 13 with lifesat > 8
high_lifesat_girls <- nrow(subset(hsbc, sex == "Girl" & AGECAT == 13 & lifesat > 8))
cat("Girls in age 13 with lifesat > 8:", high_lifesat_girls, "\n")
# Add health_index_binary column
hsbc_merged$health_index_binary <- ifelse(hsbc_merged$health_index >= 7, 1, 0)
head(hsbc_merged$health_index_binary)
# Add health_index_binary column
hsbc_merged$health_index_binary <- ifelse(hsbc_merged$health_index >= 7, 1, 0)
head(hsbc_merged$health_index_binary)
# Create health_index_binary column
hsbc <- hsbc %>% mutate(health_index_binary = ifelse(health_index >= 7, 1, 0))
# Add health_index_binary column
hsbc_merged$health_index_binary <- ifelse(hsbc_merged$health_index >= 7, 1, 0)
head(hsbc_merged$health_index_binary)
# Create health_index_binary column
hsbc_merged <- hsbc_merged %>% mutate(health_index_binary = ifelse(health_index >= 7, 1, 0))
# Add health_index_binary column
hsbc_merged$health_index_binary <- ifelse(hsbc_merged$health_index >= 7, 1, 0)
head(hsbc_merged$health_index_binary)
# Create health_index_binary column
hsbc_merged <- hsbc_merged %>% mutate(health_index_binary = ifelse(health_index >= 7, 1, 0))
# Add health_index_binary column
hsbc_merged$health_index_binary <- ifelse(hsbc_merged$health_index >= 7, 1, 0)
head(hsbc_merged$health_index_binary)
# Mean lifesat for health_index_binary
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc_merged, mean)
print(lifesat_means)
# Category with higher life satisfaction
if (lifesat_means$lifesat[1] > lifesat_means$lifesat[2]) {
cat("Higher life satisfaction for health_index_binary = 0\n")
} else {
cat("Higher life satisfaction for health_index_binary = 1\n")
}
# Load ggplot2 package
library(ggplot2)
# Convert health_index_binary to a factor
hsbc_merged$health_index_binary <- factor(hsbc_merged$health_index_binary)
# Plot density of lifesat
ggplot(hsbc_merged, aes(x = lifesat)) +
geom_density() +
labs(title = "Density Plot of Life Satisfaction")
# Density plot by health_index_binary
ggplot(hsbc_merged, aes(x = lifesat, color = health_index_binary, fill = health_index_binary)) +
geom_density(alpha = 0.3) +
labs(title = "Life Satisfaction Density by Health Index Binary")
hsbc_basic <- read.csv("hsbc-basic.csv", header = TRUE)
hsbc_health <- read.table("hsbc-health.txt", header = TRUE)
# Display the structure to find rows and columns
cat("hsbc_basic - Rows:", nrow(hsbc_basic), "Columns:", ncol(hsbc_basic), "\n")
cat("hsbc_health - Rows:", nrow(hsbc_health), "Columns:", ncol(hsbc_health), "\n")
# Check the data types for hsbc_basic
cat("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Check the data types for hsbc_health
cat("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Display the structure to find rows and columns
cat("hsbc_basic: Rows-", nrow(hsbc_basic), "Columns-", ncol(hsbc_basic), "\n")
cat("hsbc_health: Rows-", nrow(hsbc_health), "Columns-", ncol(hsbc_health), "\n")
# Check the data types for hsbc_basic
print("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Check the data types for hsbc_health
print("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Display the structure to find rows and columns
print("hsbc_basic: Rows-", nrow(hsbc_basic), "Columns-", ncol(hsbc_basic), "\n")
# Display the structure to find rows and columns
cat("hsbc_basic: Rows-", nrow(hsbc_basic), "Columns-", ncol(hsbc_basic), "\n")
cat("hsbc_health: Rows-", nrow(hsbc_health), "Columns-", ncol(hsbc_health), "\n")
# Check the data types for hsbc_basic
print("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Check the data types for hsbc_health
print("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Display the structure to find rows and columns
cat("hsbc_basic: Rows-", nrow(hsbc_basic), "Columns -", ncol(hsbc_basic), "\n")
cat("hsbc_health: Rows-", nrow(hsbc_health), "Columns -", ncol(hsbc_health), "\n")
# Check the data types for hsbc_basic
print("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# Check the data types for hsbc_health
print("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
# Merge datasets on id4
hsbc <- merge(hsbc_basic, hsbc_health, by = "id4")
# Display number of rows and columns in the merged data
cat("hsbc - Rows:", nrow(hsbc), "Columns:", ncol(hsbc), "\n")
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
cat("Columns with missing values:")
print(missing_values[missing_columns])
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
print("Columns that misses values - ")
print(missing_values[missing_columns])
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
print("Columns that misses values - "missing_values[missing_columns])
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
print("Columns that misses values - ")
print(missing_values[missing_columns])
# Average life satisfaction
average_lifesat <- mean(hsbc$lifesat, na.rm = TRUE)
cat("Average Life Satisfaction -", average_lifesat, "\n")
# Observations by age category
age_counts <- table(hsbc$AGECAT)
print(age_counts)
# Age category with most observations
most_observed_agecat <- names(which.max(age_counts))
cat("Age category with most observations:", most_observed_agecat, "\n")
# Bullying by age category
bullying_counts <- table(hsbc$AGECAT[hsbc$bully_dummy == 1])
print(bullying_counts)
# Age category with most bullied children
most_bullied <- names(which.max(bullying_counts))
cat("Age category with most bullied children:", most_bullied, "\n")
# (a)
low_lifesat_bullied <- nrow(subset(hsbc, bully_dummy == 1 & lifesat < 7))
cat("Bullied kids with lifesat < 7:", low_lifesat_bullied, "\n")
# (b)
high_lifesat_girls <- nrow(subset(hsbc, sex == "Girl" & AGECAT == 13 & lifesat > 8))
cat("Girls in age 13 with lifesat > 8:", high_lifesat_girls, "\n")
# Add health_index_binary column
hsbc$health_index_binary <- ifelse(hsbc$health_index >= 7, 1, 0)
head(hsbc$health_index_binary)
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
# Category with higher life satisfaction
if (lifesat_means$lifesat[1] > lifesat_means$lifesat[2]) {
cat("Higher life satisfaction for health_index_binary = 0\n")
} else {
cat("Higher life satisfaction for health_index_binary = 1\n")
}
# Compute conditional means of life satisfaction based on health_index_binary
conditional_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean, na.rm = TRUE)
# Display the conditional means
cat("Conditional means of life satisfaction by health_index_binary:\n")
print(conditional_means)
# Identify which status has the highest average life satisfaction
highest_lifesat_status <- conditional_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("Health index binary status with the highest average life satisfaction:", highest_lifesat_status, "\n")
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
# Identify which status has the highest average life satisfaction
highest_lifesat_status <- conditional_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("Health index binary status with the highest average life satisfaction:", highest_lifesat_status, "\n")
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
# Identify which status has the highest average life satisfaction
highest_lifesat_status <- conditional_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("Health index binary status with the highest average life satisfaction:", highest_lifesat_status, "\n")
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
# Compute conditional means of life satisfaction based on health_index_binary
conditional_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean, na.rm = TRUE)
# Display the conditional means
cat("Conditional means of life satisfaction by health_index_binary:\n")
print(conditional_means)
# Identify which status has the highest average life satisfaction
highest_lifesat_status <- conditional_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("Health index binary status with the highest average life satisfaction:", highest_lifesat_status, "\n")
library(ggplot2)
# health_index_binary to Factor
hsbc$health_index_binary <- factor(hsbc$health_index_binary)
# Plot density of lifesat
ggplot(hsbc, aes(x = lifesat)) +
geom_density() +
labs(title = "Density Plot of Life Satisfaction")
# Density plot by health_index_binary
ggplot(hsbc, aes(x = lifesat, color = health_index_binary, fill = health_index_binary)) +
geom_density(alpha = 0.3) +
labs(title = "Life Satisfaction Density by Health Index Binary")
# Load ggplot2 library for plotting
library(ggplot2)
# Density plot of life satisfaction, colored by health_index_binary
ggplot(hsbc, aes(x = lifesat, fill = health_index_binary)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Life Satisfaction by Health Index Binary",
x = "Life Satisfaction",
y = "Density") +
scale_fill_manual(values = c("blue", "red"), name = "Health Index Binary") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
highest_lifesat_status <- conditional_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("highest average life satisfaction for binary of...", highest_lifesat_status, "\n")
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
highest_lifesat_status <- lifesat_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("highest average life satisfaction for binary of...", highest_lifesat_status, "\n")
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
highest_lifesat_status <- lifesat_means$health_index_binary[which.max(conditional_means$lifesat)]
cat("highest average life satisfaction for binary of...", highest_lifesat_status, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Load the dataset. Assign data to objects.
hsbc_basic <- read.csv("hsbc-basic.csv", header = TRUE)
hsbc_health <- read.table("hsbc-health.txt", header = TRUE)
# number of rows and columns
cat("hsbc_basic: Rows-", nrow(hsbc_basic), "Columns -", ncol(hsbc_basic), "\n")
cat("hsbc_health: Rows-", nrow(hsbc_health), "Columns -", ncol(hsbc_health), "\n")
# data types for hsbc_basic
print("hsbc_basic - Variable Types:\n")
str(hsbc_basic)
# data types for hsbc_health
print("hsbc_health - Variable Types:\n")
str(hsbc_health)
# Merge datasets on id4
hsbc <- merge(hsbc_basic, hsbc_health, by = "id4")
# Display number of rows and columns in the merged data
cat("hsbc - Rows:", nrow(hsbc), "Columns:", ncol(hsbc), "\n")
# Find columns with missing values in the merged dataset
missing_values <- sapply(hsbc, function(x) sum(is.na(x)))
missing_columns <- names(missing_values[missing_values > 0])
# Display columns with missing values and the number of missing entries
print("Columns that misses values - ")
print(missing_values[missing_columns])
# Average life satisfaction
average_lifesat <- mean(hsbc$lifesat, na.rm = TRUE)
cat("Average Life Satisfaction -", average_lifesat, "\n")
# Observations by age category
age_counts <- table(hsbc$AGECAT)
print(age_counts)
# Age category with most observations
most_observed_agecat <- names(which.max(age_counts))
cat("Age category with most observations:", most_observed_agecat, "\n")
# Bully by age category
bullying_counts <- table(hsbc$AGECAT[hsbc$bully_dummy == 1])
print(bullying_counts)
# Age category with most bullied children
most_bullied <- names(which.max(bullying_counts))
cat("highest recorded number category of bullied kids", most_bullied, "\n")
# (a)
low_lifesat_bullied <- nrow(subset(hsbc, bully_dummy == 1 & lifesat < 7))
cat("Bullied kids with lifesat < 7:", low_lifesat_bullied, "\n")
# (b)
high_lifesat_girls <- nrow(subset(hsbc, sex == "Girl" & AGECAT == 13 & lifesat > 8))
cat("Girls in age 13 with lifesat > 8:", high_lifesat_girls, "\n")
hsbc$health_index_binary <- ifelse(hsbc$health_index >= 7, 1, 0)
head(hsbc$health_index_binary)
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
highest_lifesat_status <- lifesat_means$health_index_binary[which.max(conditional_means$lifesat)]
# conditional mean of lifesat
lifesat_means <- aggregate(lifesat ~ health_index_binary, data = hsbc, mean)
print(lifesat_means)
highest_lifesat_status <- lifesat_means$health_index_binary[which.max(lifesat_means$lifesat)]
cat("highest average life satisfaction for binary of...", highest_lifesat_status, "\n")
library(ggplot2)
# health_index_binary to Factor
hsbc$health_index_binary <- factor(hsbc$health_index_binary)
# Plot density of lifesat
ggplot(hsbc, aes(x = lifesat)) +
geom_density() +
labs(title = "Density Plot of Life Satisfaction")
# Density plot
ggplot(hsbc, aes(x = lifesat, color = health_index_binary, fill = health_index_binary)) +
geom_density(alpha = 0.3) +
labs(title = "Life Satisfaction Density by Health Index Binary")
# Load ggplot2 library for plotting
library(ggplot2)
# Density plot of life satisfaction, colored by health_index_binary
ggplot(hsbc, aes(x = lifesat, fill = health_index_binary)) +
geom_density(alpha = 0.5) +
labs(title = "Life Satisfaction by Health Index Binary",
x = "lifesat",
y = "density") +
scale_fill_manual(values = c("blue", "red"), name = "Health Index Binary") +
theme_minimal()
write.csv(hsbc, "hsbc.csv", row.names = FALSE)
